[{"C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\index.js":"1","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\App.js":"2","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Components\\Search\\CreateUser\\CreateModal.js":"3","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Components\\DataGrid\\ActionModal.js":"4","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Axios\\index.js":"5","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Pages\\Search.js":"6","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Pages\\DataGrid.js":"7","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Components\\Search\\MoreFeatures\\MoreFeatures.js":"8","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\ClubSqlLabel.js":"9"},{"size":289,"mtime":1672174177740,"results":"10","hashOfConfig":"11"},{"size":493,"mtime":1672806481369,"results":"12","hashOfConfig":"11"},{"size":5020,"mtime":1672839367908,"results":"13","hashOfConfig":"11"},{"size":4500,"mtime":1672844190523,"results":"14","hashOfConfig":"11"},{"size":1541,"mtime":1672806431835,"results":"15","hashOfConfig":"11"},{"size":2528,"mtime":1672800803212,"results":"16","hashOfConfig":"11"},{"size":741,"mtime":1672839799366,"results":"17","hashOfConfig":"11"},{"size":1261,"mtime":1672837874171,"results":"18","hashOfConfig":"11"},{"size":2680,"mtime":1672844222466,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1woj8cb",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\index.js",[],"C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\App.js",["40"],"C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Components\\Search\\CreateUser\\CreateModal.js",["41","42","43"],"import React, { useState } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  InputNumber,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Space,\r\n  Select,\r\n  DatePicker,\r\n  TimePicker\r\n} from 'antd'\r\n\r\nimport { UserAddOutlined } from '@ant-design/icons'\r\nimport { postData } from '../../../Axios/index.js'\r\nimport { ClubSqlLabel } from '../../../ClubSqlLabel.js'\r\n\r\nconst { Option } = Select\r\n\r\nconst label = ClubSqlLabel\r\n\r\nconst CreateModal = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [data, setData] = useState({})\r\n  const [messageApi, contextHolder] = message.useMessage()\r\n  const success = () => {\r\n    messageApi.open({\r\n      type: 'success',\r\n      content: '成功新增'\r\n    })\r\n  }\r\n  const showModal = () => {\r\n    setIsModalOpen(true)\r\n  }\r\n  const handleCancel = () => {\r\n    setIsModalOpen(false)\r\n  }\r\n  const onFinish = values => {\r\n    console.log(data)\r\n    setIsModalOpen(false)\r\n    postData(data)\r\n    success()\r\n  }\r\n  const onFinishFailed = errorInfo => {\r\n    console.log('Failed:', errorInfo)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {contextHolder}\r\n      <Button icon={<UserAddOutlined />} onClick={showModal}>\r\n        新增\r\n      </Button>\r\n      <Modal\r\n        title=\"新增教師\"\r\n        open={isModalOpen}\r\n        footer={null}\r\n        onCancel={handleCancel}\r\n      >\r\n        <Form\r\n          name=\"basic\"\r\n          labelCol={{\r\n            span: 6\r\n          }}\r\n          wrapperCol={{\r\n            span: 16\r\n          }}\r\n          initialValues={{\r\n            remember: true\r\n          }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          autoComplete=\"off\"\r\n        >\r\n          {label.map((item, index) => {\r\n            if (item.type === 'selection') {\r\n              return (\r\n                <Form.Item\r\n                  label={item.title}\r\n                  name={item.key}\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: `Please input ${item.title}`\r\n                    }\r\n                  ]}\r\n                >\r\n                  <Select\r\n                    placeholder=\"Select a option and change input text above\"\r\n                    onChange={e => {\r\n                      setData({ ...data, [item.key]: e })\r\n                    }}\r\n                    allowClear\r\n                  >\r\n                    {item.selection.map((item2, index) => {\r\n                      return (\r\n                        <Option value={item2.label} key={index}>\r\n                          {item2.value}\r\n                        </Option>\r\n                      )\r\n                    })}\r\n                  </Select>\r\n                </Form.Item>\r\n              )\r\n            }\r\n            if (item.type === 'dateTime') {\r\n              return (\r\n                <Form.Item\r\n                  label={item.title}\r\n                  name={item.key}\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: `Please input ${item.title}`\r\n                    }\r\n                  ]}\r\n                >\r\n                  <DatePicker\r\n                    style={{ width: '100%' }}\r\n                    onChange={e => setData({ ...data, [item.key]: e._d })}\r\n                  />\r\n                </Form.Item>\r\n              )\r\n            }\r\n            if (item.type === 'number') {\r\n              return (\r\n                <Form.Item\r\n                  label={item.title}\r\n                  name={item.key}\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: `Please input ${item.title}`\r\n                    }\r\n                  ]}\r\n                >\r\n                  <InputNumber\r\n                    style={{ width: '100%' }}\r\n                    onChange={e => setData({ ...data, [item.key]: e })}\r\n                  />\r\n                </Form.Item>\r\n              )\r\n            }\r\n            if (item.type === 'text' || item.type === 'email') {\r\n              return (\r\n                <Form.Item\r\n                  label={item.title}\r\n                  name={item.key}\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: `Please input ${item.title}`\r\n                    }\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    type={item.type}\r\n                    onChange={e =>\r\n                      setData({ ...data, [item.key]: e.target.value })\r\n                    }\r\n                  />\r\n                </Form.Item>\r\n              )\r\n            }\r\n          })}\r\n          <Form.Item\r\n            wrapperCol={{\r\n              offset: 8,\r\n              span: 16\r\n            }}\r\n          >\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\nexport default CreateModal\r\n","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Components\\DataGrid\\ActionModal.js",["44","45","46","47","48","49"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Space,\r\n  Input,\r\n  Select,\r\n  Modal,\r\n  Switch,\r\n  message,\r\n  DatePicker,\r\n  InputNumber\r\n} from 'antd'\r\nimport { putData } from '../../Axios'\r\nimport dayjs from 'dayjs'\r\nimport weekday from 'dayjs/plugin/weekday'\r\nimport localeData from 'dayjs/plugin/localeData'\r\nimport { ClubSqlLabel } from '../../ClubSqlLabel'\r\n\r\ndayjs.extend(weekday)\r\ndayjs.extend(localeData)\r\n\r\nconst label = ClubSqlLabel\r\n\r\nconst ActionModal = props => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [isUpdate, setIsUpdate] = useState(false)\r\n  const [messageApi, contextHolder] = message.useMessage()\r\n\r\n  const [data, setData] = useState({})\r\n\r\n  const { Option } = Select\r\n\r\n  useEffect(() => {\r\n    setData(props.data)\r\n  }, [props.data])\r\n\r\n  const success = () => {\r\n    messageApi.open({\r\n      type: 'success',\r\n      content: '更新成功'\r\n    })\r\n  }\r\n  const showModal = () => {\r\n    setIsModalOpen(true)\r\n  }\r\n  const handleOk = () => {\r\n    setIsModalOpen(false)\r\n\r\n    if (isUpdate) {\r\n      putData(data.ID, data)\r\n      success()\r\n    }\r\n  }\r\n  const handleCancel = () => {\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  const onChange = checked => {\r\n    setIsUpdate(checked)\r\n  }\r\n  return (\r\n    <>\r\n      {contextHolder}\r\n      <a onClick={showModal}>顯示更多</a>\r\n      <Modal\r\n        title=\"顯示更多\"\r\n        open={isModalOpen}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n      >\r\n        <Switch onChange={onChange} />\r\n        {label.map((item, index) => {\r\n          console.log(data)\r\n          return (\r\n            <table width=\"100%\">\r\n              <tr>\r\n                <td width=\"30%\">{item.title}</td>\r\n                <td width=\"70%\">\r\n                  {item.type === 'selection' ? (\r\n                    <Select\r\n                      placeholder=\"Select a option and change input text above\"\r\n                      onChange={e => {\r\n                        setData({ ...data, [item.key]: parseInt(e) })\r\n                      }}\r\n                      style={{\r\n                        marginTop: '10px',\r\n                        width: '100%',\r\n                        width: '100%'\r\n                      }}\r\n                      value={\r\n                        data[item.key] === 1\r\n                          ? item.selection[0].value\r\n                          : item.selection[1].value\r\n                      }\r\n                      allowClear\r\n                      disabled={!isUpdate}\r\n                    >\r\n                      {item.selection.map((item2, index) => {\r\n                        return (\r\n                          <Option value={item2.label} key={index}>\r\n                            {item2.value}\r\n                          </Option>\r\n                        )\r\n                      })}\r\n                    </Select>\r\n                  ) : null}\r\n                  {item.type === 'dateTime' ? (\r\n                    <DatePicker\r\n                      disabled={!isUpdate}\r\n                      style={{\r\n                        marginTop: '10px',\r\n                        width: '100%',\r\n                        width: '100%'\r\n                      }}\r\n                      defaultValue={dayjs(data[item.key], 'yyyy-mm-dd')}\r\n                      onChange={e => setData({ ...data, [item.key]: e._d })}\r\n                    />\r\n                  ) : null}\r\n                  {item.type === 'text' || item.type === 'email' ? (\r\n                    <Input\r\n                      disabled={!isUpdate}\r\n                      value={data[item.key]}\r\n                      style={{ marginTop: '10px', width: '100%' }}\r\n                      onChange={e => {\r\n                        setData({ ...data, [item.key]: e.target.value })\r\n                      }}\r\n                    />\r\n                  ) : null}\r\n                  {item.type === 'number' ? (\r\n                    <InputNumber\r\n                      disabled={!isUpdate}\r\n                      style={{\r\n                        marginTop: '10px',\r\n                        width: '100%',\r\n                        width: '100%'\r\n                      }}\r\n                      value={data[item.key]}\r\n                      onChange={e => setData({ ...data, [item.key]: e })}\r\n                    />\r\n                  ) : null}\r\n                </td>\r\n              </tr>\r\n            </table>\r\n          )\r\n        })}\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\nexport default ActionModal\r\n","C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Axios\\index.js",[],"C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Pages\\Search.js",["50"],"C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Pages\\DataGrid.js",["51","52","53"],"C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\Components\\Search\\MoreFeatures\\MoreFeatures.js",["54","55"],"C:\\Users\\yang900412\\Documents\\Club\\react-electron\\src\\ClubSqlLabel.js",["56","57","58"],{"ruleId":"59","severity":1,"message":"60","line":9,"column":13,"nodeType":"61","endLine":11,"endColumn":4},{"ruleId":"62","severity":1,"message":"63","line":9,"column":3,"nodeType":"64","messageId":"65","endLine":9,"endColumn":8},{"ruleId":"62","severity":1,"message":"66","line":12,"column":3,"nodeType":"64","messageId":"65","endLine":12,"endColumn":13},{"ruleId":"67","severity":1,"message":"68","line":76,"column":36,"nodeType":"61","messageId":"69","endLine":76,"endColumn":38},{"ruleId":"62","severity":1,"message":"70","line":3,"column":3,"nodeType":"64","messageId":"65","endLine":3,"endColumn":9},{"ruleId":"62","severity":1,"message":"63","line":4,"column":3,"nodeType":"64","messageId":"65","endLine":4,"endColumn":8},{"ruleId":"71","severity":1,"message":"72","line":64,"column":7,"nodeType":"73","endLine":64,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":88,"column":25,"nodeType":"76","messageId":"77","endLine":88,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":113,"column":25,"nodeType":"76","messageId":"77","endLine":113,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":135,"column":25,"nodeType":"76","messageId":"77","endLine":135,"endColumn":30},{"ruleId":"62","severity":1,"message":"78","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":20},{"ruleId":"62","severity":1,"message":"79","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":26},{"ruleId":"62","severity":1,"message":"80","line":1,"column":28,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"81","line":2,"column":24,"nodeType":"64","messageId":"65","endLine":2,"endColumn":27},{"ruleId":"62","severity":1,"message":"82","line":3,"column":44,"nodeType":"64","messageId":"65","endLine":3,"endColumn":51},{"ruleId":"62","severity":1,"message":"83","line":6,"column":7,"nodeType":"64","messageId":"65","endLine":6,"endColumn":24},{"ruleId":"62","severity":1,"message":"63","line":1,"column":10,"nodeType":"64","messageId":"65","endLine":1,"endColumn":15},{"ruleId":"62","severity":1,"message":"84","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":22},{"ruleId":"85","severity":1,"message":"86","line":42,"column":15,"nodeType":"87","messageId":"77","endLine":42,"endColumn":17},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'Space' is defined but never used.","Identifier","unusedVar","'TimePicker' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Button' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-dupe-keys","Duplicate key 'width'.","ObjectExpression","unexpected","'SearchData' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Tag' is defined but never used.","'Tooltip' is defined but never used.","'handleButtonClick' is assigned a value but never used.","'Table' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression"]